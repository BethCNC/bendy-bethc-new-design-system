import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env' });

// Minimal Figma node typing for our use
interface FigmaPaint {
  type: string;
  color?: { r: number; g: number; b: number };
  opacity?: number;
}

interface FigmaTextStyle {
  fontFamily?: string;
  fontWeight?: number;
  fontSize?: number;
  lineHeightPx?: number;
  letterSpacing?: number;
}

interface FigmaNode {
  id: string;
  name: string;
  type: string;
  visible?: boolean;
  children?: FigmaNode[];
  fills?: FigmaPaint[];
  characters?: string;
  style?: FigmaTextStyle;
  absoluteBoundingBox?: { x: number; y: number; width: number; height: number };
}

interface FigmaNodesResponse {
  nodes: Record<string, { document: FigmaNode }>;
}

const FIGMA_ACCESS_TOKEN = process.env.FIGMA_API_KEY || process.env.FIGMA_ACCESS_TOKEN;

const DEFAULT_FILE_KEY = 'Jj89xqSTRiTU2P4qEw5zUu';
const DEFAULT_NODE_ID = '1410:5957';

function parseArgs(): { fileKey: string; nodeId: string; url?: string } {
  const args = process.argv.slice(2);
  let fileKey = DEFAULT_FILE_KEY;
  let nodeId = DEFAULT_NODE_ID;
  let url: string | undefined;

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === '--file' && args[i + 1]) fileKey = args[++i];
    else if (arg === '--node' && args[i + 1]) nodeId = args[++i];
    else if (arg === '--url' && args[i + 1]) url = args[++i];
  }

  if (url) {
    const fileKeyMatch = url.match(/design\/([A-Za-z0-9]+)\?/);
    const nodeIdMatch = url.match(/node-id=([^&]+)/);
    if (fileKeyMatch) fileKey = fileKeyMatch[1];
    if (nodeIdMatch) {
      const rawNode = decodeURIComponent(nodeIdMatch[1]);
      // Figma "design" URLs often use hyphens; Figma API expects colons
      nodeId = rawNode.replace(/-/g, ':');
    }
  }

  return { fileKey, nodeId, url };
}

async function fetchFigmaNode(fileKey: string, nodeId: string): Promise<FigmaNode> {
  if (!FIGMA_ACCESS_TOKEN) {
    throw new Error('FIGMA_ACCESS_TOKEN env var is required');
  }

  const url = `https://api.figma.com/v1/files/${fileKey}/nodes?ids=${encodeURIComponent(nodeId)}`;
  const res = await fetch(url, {
    headers: { 'X-Figma-Token': FIGMA_ACCESS_TOKEN }
  });
  if (!res.ok) {
    const text = await res.text();
    throw new Error(`Figma API error ${res.status}: ${res.statusText} - ${text}`);
  }
  const data = (await res.json()) as FigmaNodesResponse;
  const node = data.nodes[nodeId]?.document;
  if (!node) throw new Error(`Node ${nodeId} not found in file ${fileKey}`);
  return node;
}

function collectTextNodes(node: FigmaNode, acc: FigmaNode[] = []): FigmaNode[] {
  if (node.type === 'TEXT' && node.characters) {
    acc.push(node);
  }
  if (node.children) node.children.forEach(child => collectTextNodes(child, acc));
  return acc;
}

function pickTitleFromTextNodes(textNodes: FigmaNode[]): string | null {
  if (textNodes.length === 0) return null;
  // Prefer an exact match for "Coming Soon" if present
  const exact = textNodes.find(n => n.characters?.trim().toLowerCase() === 'coming soon');
  if (exact?.characters) return exact.characters.trim();

  // Otherwise, pick the largest font size as the title candidate
  const sorted = [...textNodes].sort((a, b) => (b.style?.fontSize || 0) - (a.style?.fontSize || 0));
  const top = sorted[0];
  if (top?.characters) return top.characters.trim();
  return null;
}

function ensureDir(dir: string) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function writeAuditFiles(nodeId: string, node: FigmaNode) {
  const outDir = path.join(process.cwd(), 'data', 'figma-analysis');
  ensureDir(outDir);
  const filePath = path.join(outDir, `component-${nodeId.replace(/:/g, '-')}-details.json`);
  fs.writeFileSync(filePath, JSON.stringify(node, null, 2));
  return filePath;
}

function generatePageContent(title: string, figmaUrl: string): string {
  return `'use client';

import React from 'react';
import Layout, { PageSection } from '../components/layout/Layout';
import PageTitle from '../components/ui/PageTitle';

/**
 * Coming Soon Page
 * Generated from Figma spec: ${figmaUrl}
 * References: CLAUDE.md (design system enforcement)
 *
 * NOTE: This file was generated by scripts/generate-coming-soon-page.ts
 * - Uses existing components and design system tokens only
 * - Do not add hardcoded styles or non-system classes
 */
export default function ComingSoonPage() {
  return (
    <>
      {/* Page title uses existing design system styles via PageTitle */}
      <PageTitle title={${JSON.stringify(title)}} />
      <Layout>
        <PageSection padding="default" maxWidth="default">
          {/* TODO: VERIFY: Subcopy text and layout against Figma node ${figmaUrl} */}
          <p className="text-body-md-regular">
            This page is coming soon. I‚Äôm building it with care, clarity, and the same honesty I bring to every part of this project.
          </p>
        </PageSection>
      </Layout>
    </>
  );
}
`;
}

async function main() {
  const { fileKey, nodeId, url } = parseArgs();
  const figmaUrl = url || `https://www.figma.com/design/${fileKey}/Bendy_BethC-Website?node-id=${encodeURIComponent(nodeId)}`;

  console.log('üîç Generating Coming Soon page from Figma');
  console.log(`üìÅ File: ${fileKey}`);
  console.log(`üéØ Node: ${nodeId}`);
  console.log(`üîó URL:  ${figmaUrl}`);

  const node = await fetchFigmaNode(fileKey, nodeId);
  const auditPath = writeAuditFiles(nodeId, node);
  console.log(`üìÑ Saved Figma node details ‚Üí ${auditPath}`);

  const textNodes = collectTextNodes(node);
  const inferredTitle = pickTitleFromTextNodes(textNodes) || 'Coming Soon';
  if (!pickTitleFromTextNodes(textNodes)) {
    console.log('‚ÑπÔ∏è Did not find explicit "Coming Soon" text in node. Using fallback with TODO: VERIFY in file.');
  } else {
    console.log(`‚úÖ Title inferred from Figma: "${inferredTitle}"`);
  }

  // Write Next.js page file
  const outDir = path.join(process.cwd(), 'app', 'coming-soon');
  ensureDir(outDir);
  const outFile = path.join(outDir, 'page.tsx');
  const content = generatePageContent(inferredTitle, figmaUrl);
  fs.writeFileSync(outFile, content);
  console.log(`üß© Wrote page ‚Üí ${outFile}`);

  console.log('üéâ Done. Next steps:');
  console.log('  1) Verify text and layout against Figma spec');
  console.log('  2) Run: node scripts/claude-design-system-checker.js --class "text-body-md-regular"');
  console.log('  3) Build: npm run build');
}

main().catch(err => {
  console.error('‚ùå Error:', err.message || err);
  process.exit(1);
});
